The Great Oak Meals Scheduling Survey
----------------------------------------
Directions to set up the survey:

# check that there aren't uncommitted modifications in the production version:
	cd /home/gocoho/meals_scheduling/
	git status

# make sure that unit tests work:
	cd tests
	./run.sh
	cd ..

# grab the latest sqlite file from webfactional, fix permissions, and commit:
	scp gocoho@web30.webfaction.com:webapps/django/allocation/file.db public/sqlite_data/work_allocation.db
	chmod 664 !$
	# sudo chgrp gocoho !$
	git commit !$

# edit public/config.php
	- set the appropriate DEADLINE date

# edit public/utils.php
	- confirm the holiday dates (get_holidays) function is correct for
	  the upcoming season 

# add any extra workers to the get_num_shift_overrides() function

# get new job IDs for the season, and update the defines for each job in config.php
	cd ../utils/
	php find_current_season_jobs.php
	# copy that block and replace the previous season's entries in this file:
	vi ../public/config.php

# initialize the database
	php initialize_database.php
	cd ..
	git status
	git add ... # any changed files
	git commit

# test to make sure everything works in the dev directory
	- confirm that the calendar dates are correct
	- confirm the holidays and meeting nights are correct
	- fill in some entries and save them, then revert
		* git checkout sqlite_data/work_allocation.db
	- load listing page again to make sure the db is writeable

# verify that the number of shifts counted is proper:
	- /report.php "Number of assignments needed"

# notify participants that the survey is ready
 
# commit the current state
  	- git status
  	- git add *
  	- git commit

# set up database backup routine on the webserver:
	mkdir ~/backups
	chmod 700 ~/backups/
	sudo bash
	crontab -e
	# uncomment the following lines:
	20 *   *   *   *   /bin/cp -f ~/meals_scheduling/public/sqlite_data/work_allocation.db ~/backups/
	25 *   *   *   *   /usr/bin/gzip -f ~/backups/work_allocation.db

# set up a cronjob to copy webserver locally:
	57 * * * * rsync -e 'ssh -p 7822' -avz fluidth1@a2ss23.a2hosting.com:meals_scheduling/ ~/backups/a2hosting/

# make sure the work allocation crontab is in place to copy from webserver to desktop

- schedule a few reminders spaced out over the rest of the session to send
  reminder emails to laggards

what to do at the end of the survey:
-------------------------------------
- disable cronjobs

- commit closed database:
	git status
	git add # files which changed
	git commit

- check for any un-assigned workers
	cd auto_assignments/
	php assignments -x

- count un-filled slots:
	php assignments.php -s > schedule.txt
	grep XXX !$

- Examine workers:
	php assignments.php -w > workers.txt

- Someone may have volunteered to take too many additional dinners.
  Reduce the number of needed volunteer / override positions mentioned
  with this:
	grep OVERAGE workers.txt

- find the people who aren't fully assigned:
	egrep '(^name|\(0)' workers.txt | grep -B1 'j:'

- check for hobarter ratio:
	php assignments.php -s | grep 'MISSED HOBART'

- read the comments and make sure they apply cleanly with auto-checks, copy and
  paste from "Confirm results check" section, and create custom ones for anything
  that's not a personal avoid request.

- check to make sure that there are no 'table setter' assignments which conflict
  with head or asst cooking

- do any swapping needed

- run avoids validation:
	cd ../utils/
	php validate_schedule.php -f ../auto_assignments/schedule.txt

translate dale's work system user names to MESS inserts
--------------------------------------------------------
- go to phpPgAdmin
	* https://web471.webfaction.com/phpPgAdmin/
	* servers
	* postgres
	* login
	* mess_production
	* public
	* users / Select action
		- id, first, last, alternate_id,
		- Select button
	* Download
	* Format: CSV and Download
	* scp -P 7822 ~/Downloads/dump.csv fluidth1@a2ss23.a2hosting.com:

- rename:
	* cat dump.csv | grep -v '"\\N"' > meals_scheduling/public/results/go_user_ids.csv
	* rm dump.csv

- extract just the alternate IDs:
	* cd meals_scheduling/public/results/
	* cat go_user_ids.csv | cut -d\, -f4 | cut -d\" -f2 | sort -u > go_mess_names.txt

- extract the scheduled names:
	* cd public/
	* sqlite3 sqlite_data/work_allocation.db "select username from auth_user order by username" > results/auth_users.txt

- look for any missing, and yet current workers:
	* diff go_mess_names.txt auth_users.txt | grep '>' > missing_from_mess.txt

#!#

#!# need to get them entered into the new system...



#!# need to inspect the names list first...

- generate the ruby inserts:
	* php meals_inserts.php > mess_schedule_inserts.rb



- ?? profit!








